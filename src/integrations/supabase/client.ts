
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nhheygdilixbqwrfxbtt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5oaGV5Z2RpbGl4YnF3cmZ4YnR0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI1Njc1MDYsImV4cCI6MjA1ODE0MzUwNn0.IJE-pAPztQl27c2kRJgV-iBaVb1M04WsOH9tra1aE90";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create the typed client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Base types for custom tables not in the Database type
export interface BaseSolicitacao {
  id: number;
  solicitante_id: number;
  status: string;
  created_at: string;
  updated_at: string;
  tipo?: string; // Add tipo property to make things easier for MinhasSolicitacoes
}

export interface SolicitacaoAbonoPonto extends BaseSolicitacao {
  cidade: string;
  turno: string;
  rota: string;
  descricao: string;
  data_ocorrencia: string;
  motivo: string;
}

export interface SolicitacaoAdesaoCancelamento extends BaseSolicitacao {
  tipo_solicitacao: string;
  email: string;
  motivo: string;
}

export interface SolicitacaoAlteracaoEndereco extends BaseSolicitacao {
  telefone: string;
  cep: string;
  endereco: string;
  bairro: string;
  cidade: string;
  complemento?: string;
  telefone_whatsapp: string;
  rota_atual: string;
  alterar_rota: boolean;
  nova_rota?: string;
  endereco_atual: string;
  endereco_novo: string;
  data_alteracao: string;
}

export interface SolicitacaoMudancaTurno extends BaseSolicitacao {
  telefone: string;
  cep: string;
  endereco: string;
  bairro: string;
  cidade: string;
  turno_atual: string;
  novo_turno: string;
  turno_novo: string;
  nova_rota: string;
  nome_gestor: string;
  motivo: string;
  data_alteracao: string;
}

// Function to handle data type conversion
function transformData<T>(data: any[] | null): T[] {
  if (!data) return [];
  return data as T[];
}

// Add a more type-safe access to the tables not yet in the Database type
export const customSupabase = {
  from: (table: string) => {
    return {
      ...supabase.from(table as any),
      select: (columns?: string) => {
        return {
          ...supabase.from(table as any).select(columns),
          eq: (column: string, value: any) => {
            return {
              ...supabase.from(table as any).select(columns).eq(column, value),
              order: (column: string, options?: { ascending?: boolean }) => {
                const query = supabase.from(table as any).select(columns).eq(column, value).order(column, options);
                return {
                  ...query,
                  then: (onfulfilled: (value: any) => any) => {
                    return query.then((result) => {
                      // Handle the result and transform it to the expected type
                      return onfulfilled({
                        data: result.data ? result.data : [],
                        error: result.error
                      });
                    });
                  }
                };
              }
            };
          }
        };
      }
    };
  }
};
